name: Build and Deploy Microservice

on:
  workflow_call:
    inputs:
      service_name:
        required: true
        type: string
      environment:
        required: true
        type: string

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set uppercase environment
        run: echo "ENV_UPPER=$(echo ${{ inputs.environment }} | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ vars[format('AZURE_CLIENT_ID_{0}', env.ENV_UPPER)] }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          
      - name: ACR login
        run: |
          az acr login --name ${{ vars.ACR_NAME }}

      - name: Build and push image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./${{ inputs.service_name }}/Dockerfile
          push: true
          tags: ${{ vars.ACR_NAME }}.azurecr.io/${{ inputs.service_name }}-${{ inputs.environment }}:${{ github.sha }}
          
  deploy:
    name: Deploy
    needs: build
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Set uppercase environment
        run: echo "ENV_UPPER=$(echo ${{ inputs.environment }} | tr '[:lower:]' '[:upper:]')" >> $GITHUB_ENV

      - name: Azure login
        uses: azure/login@v1
        with:
          client-id: ${{ vars[format('AZURE_CLIENT_ID_{0}', env.ENV_UPPER)] }}
          tenant-id: ${{ vars.AZURE_TENANT_ID }}
          subscription-id: ${{ vars.AZURE_SUBSCRIPTION_ID }}
          
      - name: Set up kubelogin
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: 'v0.0.25'
      
      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: rg-prism-cluster-${{ inputs.environment }}
          cluster-name: aks-prism-cluster-${{ inputs.environment }}
      
      - name: Render deployment template
        uses: cschleiden/replace-tokens@v1
        with:
          files: ${{ inputs.service_name }}/deployment.yaml
          tokenPrefix: '${'
          tokenSuffix: '}'
        env:
          IMAGE_TAG: ${{ github.sha }}
          ACR_NAME: ${{ vars.ACR_NAME }}
          ENV: ${{ inputs.environment }}
          MANAGED_IDENTITY_CLIENT_ID: ${{ vars[format('MANAGED_IDENTITY_CLIENT_ID_{0}', env.ENV_UPPER)] }}
          AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
          EVENTHUB_NAME: ${{ vars[format('EVENTHUB_NAME_{0}', env.ENV_UPPER)] }}
          EVENTHUB_NAMESPACE: ${{ vars[format('EVENTHUB_NAMESPACE_{0}', env.ENV_UPPER)] }}
          KEY_VAULT_URL: ${{ vars[format('KEY_VAULT_URL_{0}', env.ENV_UPPER)] }}
      
      - name: Deploy to AKS
        uses: Azure/k8s-deploy@v4
        with:
          namespace: sensors
          manifests: ${{ inputs.service_name }}/deployment.yaml
          images: ${{ vars.ACR_NAME }}.azurecr.io/${{ inputs.service_name }}-${{ inputs.environment }}:${{ github.sha }}